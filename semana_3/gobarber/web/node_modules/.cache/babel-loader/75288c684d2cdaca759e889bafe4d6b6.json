{"ast":null,"code":"var _jsxFileName = \"/mnt/dados/nodejs/GoStack/semana_3/gobarber/web/src/pages/ResetPassword/index.tsx\";\nimport React, { useRef, useCallback } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport { FiLock } from \"react-icons/fi\";\nimport { Form } from \"@unform/web\";\nimport * as Yup from \"yup\";\nimport useToastContext from \"../../contexts/ToastContext\";\nimport Input from \"../../components/Input\";\nimport Button from \"../../components/Button\";\nimport { AnimationContainer, Background, Container, Content } from \"./styles\";\nimport logo from \"../../assets/logo.svg\";\nimport getValidationErrors from \"../../utils/getValidationErrors\";\nimport api from \"../../services/api\";\n\nconst ResetPassowrd = () => {\n  const history = useHistory();\n  const location = useLocation();\n  const formRef = useRef(null);\n  const {\n    addToast\n  } = useToastContext();\n  const handleSubmit = useCallback(async data => {\n    var _formRef$current;\n\n    (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n    const schema = Yup.object().shape({\n      password: Yup.string().required(\"A senha é obrigatória\"),\n      password_confirmation: Yup.string().oneOf([Yup.ref(\"passwordD\"), undefined], \"As senhas devem ser iguais\")\n    });\n\n    try {\n      await schema.validate(data, {\n        abortEarly: false\n      });\n      const {\n        password,\n        password_confirmation\n      } = data;\n      const token = location.search.replace(\"?token=\", \"\");\n\n      if (!token) {\n        addToast({\n          type: \"error\",\n          title: \"Erro ao resetar senha\",\n          description: \"Token inválido.\"\n        });\n      }\n\n      await api.post(\"/password/reset\", {\n        password,\n        password_confirmation\n      });\n      addToast({});\n    } catch (error) {\n      if (error instanceof Yup.ValidationError) {\n        var _formRef$current2;\n\n        const errors = getValidationErrors(error);\n        (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n        return;\n      }\n\n      addToast({\n        type: \"error\",\n        title: \"Erro ao resetar senha\",\n        description: \"Ocorreu um erro ao resetar sua senha, tente novamente.\"\n      });\n    }\n  }, [addToast]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AnimationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    alt: \"GoBarber\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, \"Recuperar senha\"), /*#__PURE__*/React.createElement(Input, {\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Nova senha\",\n    icon: FiLock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    name: \"password_confirmation\",\n    type: \"password\",\n    placeholder: \"Confirma\\xE7\\xE3o de senha\",\n    icon: FiLock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, \"Alterar senha\")))), /*#__PURE__*/React.createElement(Background, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ResetPassowrd;","map":{"version":3,"sources":["/mnt/dados/nodejs/GoStack/semana_3/gobarber/web/src/pages/ResetPassword/index.tsx"],"names":["React","useRef","useCallback","useHistory","useLocation","FiLock","Form","Yup","useToastContext","Input","Button","AnimationContainer","Background","Container","Content","getValidationErrors","api","ResetPassowrd","history","location","formRef","addToast","handleSubmit","data","current","setErrors","schema","object","shape","password","string","required","password_confirmation","oneOf","ref","undefined","validate","abortEarly","token","search","replace","type","title","description","post","error","ValidationError","errors","logo"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport { FiLock } from \"react-icons/fi\";\nimport { FormHandles } from \"@unform/core\";\nimport { Form } from \"@unform/web\";\nimport * as Yup from \"yup\";\n\nimport useToastContext from \"../../contexts/ToastContext\";\n\nimport Input from \"../../components/Input\";\nimport Button from \"../../components/Button\";\n\nimport { AnimationContainer, Background, Container, Content } from \"./styles\";\n\nimport logo from \"../../assets/logo.svg\";\nimport getValidationErrors from \"../../utils/getValidationErrors\";\nimport api from \"../../services/api\";\n\ninterface ResetPassowrdData {\n  password: string;\n  password_confirmation: string;\n}\n\nconst ResetPassowrd: React.FC = () => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const formRef = useRef<FormHandles>(null);\n  const { addToast } = useToastContext();\n\n  const handleSubmit = useCallback(\n    async (data: ResetPassowrdData): Promise<void> => {\n      formRef.current?.setErrors({});\n      const schema = Yup.object().shape({\n        password: Yup.string().required(\"A senha é obrigatória\"),\n        password_confirmation: Yup.string().oneOf(\n          [Yup.ref(\"passwordD\"), undefined],\n          \"As senhas devem ser iguais\"\n        ),\n      });\n\n      try {\n        await schema.validate(data, {\n          abortEarly: false,\n        });\n\n        const { password, password_confirmation } = data;\n        const token = location.search.replace(\"?token=\", \"\");\n\n        if (!token) {\n          addToast({\n            type: \"error\",\n            title: \"Erro ao resetar senha\",\n            description: \"Token inválido.\",\n          });\n        }\n\n        await api.post(\"/password/reset\", {\n          password,\n          password_confirmation,\n        });\n\n        addToast({});\n      } catch (error) {\n        if (error instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(error);\n          formRef.current?.setErrors(errors);\n\n          return;\n        }\n\n        addToast({\n          type: \"error\",\n          title: \"Erro ao resetar senha\",\n          description: \"Ocorreu um erro ao resetar sua senha, tente novamente.\",\n        });\n      }\n    },\n    [addToast]\n  );\n\n  return (\n    <Container>\n      <Content>\n        <AnimationContainer>\n          <img src={logo} alt=\"GoBarber\" />\n\n          <Form ref={formRef} onSubmit={handleSubmit}>\n            <h1>Recuperar senha</h1>\n\n            <Input\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Nova senha\"\n              icon={FiLock}\n            />\n\n            <Input\n              name=\"password_confirmation\"\n              type=\"password\"\n              placeholder=\"Confirmação de senha\"\n              icon={FiLock}\n            />\n\n            <Button type=\"submit\">Alterar senha</Button>\n          </Form>\n        </AnimationContainer>\n      </Content>\n      <Background />\n    </Container>\n  );\n};\n\nexport default ResetPassowrd;\n"]},"metadata":{},"sourceType":"module"}