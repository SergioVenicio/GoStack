{"ast":null,"code":"var _jsxFileName = \"/mnt/dados/goStack/semana_3/gobarber-web/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { useField } from \"@unform/core\";\nimport { Container } from \"./styles\";\n\nconst Input = ({\n  name,\n  type,\n  placeholder,\n  icon: Icon\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const inputRef = useRef(null);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\"\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: name,\n    type: type,\n    placeholder: placeholder,\n    defaultValue: defaultValue,\n    ref: inputRef,\n    onFocus: () => setIsFocused(true),\n    onBlur: handleInputBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Input;","map":{"version":3,"sources":["/mnt/dados/goStack/semana_3/gobarber-web/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","useField","Container","Input","name","type","placeholder","icon","Icon","isFocused","setIsFocused","inputRef","fieldName","defaultValue","error","registerField","handleInputBlur","ref","current","path"],"mappings":";AAAA,OAAOA,KAAP,IAEEC,SAFF,EAGEC,MAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,OANP;AASA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAMA,MAAMC,KAA2B,GAAG,CAAC;AACnCC,EAAAA,IADmC;AAEnCC,EAAAA,IAFmC;AAGnCC,EAAAA,WAHmC;AAInCC,EAAAA,IAAI,EAAEC;AAJ6B,CAAD,KAK9B;AACJ,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMY,QAAQ,GAAGb,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAEc,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDd,QAAQ,CAACG,IAAD,CAAlE;AAEA,QAAMY,eAAe,GAAGhB,WAAW,CAAC,MAAM;AACxCU,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFkC,EAEhC,EAFgC,CAAnC;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,aAAa,CAAC;AACZX,MAAAA,IAAI,EAAEQ,SADM;AAEZK,MAAAA,GAAG,EAAEN,QAAQ,CAACO,OAFF;AAGZC,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACP,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEN,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX,eAEE;AACE,IAAA,IAAI,EAAEJ,IADR;AAEE,IAAA,IAAI,EAAEC,IAFR;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,YAAY,EAAEO,YAJhB;AAKE,IAAA,GAAG,EAAEF,QALP;AAME,IAAA,OAAO,EAAE,MAAMD,YAAY,CAAC,IAAD,CAN7B;AAOE,IAAA,MAAM,EAAEM,eAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAcD,CArCD;;AAuCA,eAAeb,KAAf","sourcesContent":["import React, {\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n} from \"react\";\nimport { IconBaseProps } from \"react-icons\";\n\nimport { useField } from \"@unform/core\";\n\nimport { Container } from \"./styles\";\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\nconst Input: React.FC<InputProps> = ({\n  name,\n  type,\n  placeholder,\n  icon: Icon,\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n\n  const inputRef = useRef(null);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\",\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isFocused={isFocused}>\n      {Icon && <Icon size={20} />}\n      <input\n        name={name}\n        type={type}\n        placeholder={placeholder}\n        defaultValue={defaultValue}\n        ref={inputRef}\n        onFocus={() => setIsFocused(true)}\n        onBlur={handleInputBlur}\n      />\n    </Container>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}