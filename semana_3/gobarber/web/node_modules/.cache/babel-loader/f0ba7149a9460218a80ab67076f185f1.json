{"ast":null,"code":"var _jsxFileName = \"/mnt/dados/goStack/semana_3/gobarber-web/src/contexts/AuthContext.tsx\";\nimport React, { createContext, useCallback, useContext, useState } from \"react\";\nimport api from \"../services/api\";\nconst AuthContext = createContext({});\n\nconst AuthContextProviver = ({\n  children\n}) => {\n  const [data, setData] = useState(() => {\n    const token = localStorage.getItem(\"@GOBARBER:token\");\n    const user = localStorage.getItem(\"@GOBARBER:user\");\n\n    if (token && user) {\n      return {\n        token: token,\n        user: JSON.parse(user)\n      };\n    }\n\n    return {};\n  });\n  const signIn = useCallback(async ({\n    email,\n    password\n  }) => {\n    const {\n      data\n    } = await api.post(\"/sessions\", {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = data;\n    setData({\n      user,\n      token\n    });\n    localStorage.setItem(\"@GOBARBER:token\", token);\n    localStorage.setItem(\"@GOBARBER:user\", JSON.stringify(user));\n  }, []);\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      user: data.user,\n      signIn\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nconst useAuthContext = () => {\n  const context = useContext(AuthContext);\n  return { ...context\n  };\n};\n\nexport default useAuthContext;\nexport { AuthContextProviver };","map":{"version":3,"sources":["/mnt/dados/goStack/semana_3/gobarber-web/src/contexts/AuthContext.tsx"],"names":["React","createContext","useCallback","useContext","useState","api","AuthContext","AuthContextProviver","children","data","setData","token","localStorage","getItem","user","JSON","parse","signIn","email","password","post","setItem","stringify","useAuthContext","context"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AAEA,OAAOC,GAAP,MAAgB,iBAAhB;AAWA,MAAMC,WAAW,GAAGL,aAAa,CAAmB,EAAnB,CAAjC;;AAMA,MAAMM,mBAA6B,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACtD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAChD,UAAMO,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAd;AACA,UAAMC,IAAI,GAAGF,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAAb;;AAEA,QAAIF,KAAK,IAAIG,IAAb,EAAmB;AACjB,aAAO;AACLH,QAAAA,KAAK,EAAEA,KADF;AAELG,QAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWF,IAAX;AAFD,OAAP;AAID;;AAED,WAAO,EAAP;AACD,GAZ+B,CAAhC;AAcA,QAAMG,MAAM,GAAGf,WAAW,CACxB,OAAO;AAAEgB,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP,KAAiE;AAC/D,UAAM;AAAEV,MAAAA;AAAF,QAAW,MAAMJ,GAAG,CAACe,IAAJ,CAAS,WAAT,EAAsB;AAC3CF,MAAAA,KAD2C;AAE3CC,MAAAA;AAF2C,KAAtB,CAAvB;AAKA,UAAM;AAAER,MAAAA,KAAF;AAASG,MAAAA;AAAT,QAAkBL,IAAxB;AAEAC,IAAAA,OAAO,CAAC;AACNI,MAAAA,IADM;AAENH,MAAAA;AAFM,KAAD,CAAP;AAKAC,IAAAA,YAAY,CAACS,OAAb,CAAqB,iBAArB,EAAwCV,KAAxC;AACAC,IAAAA,YAAY,CAACS,OAAb,CAAqB,gBAArB,EAAuCN,IAAI,CAACO,SAAL,CAAeR,IAAf,CAAvC;AACD,GAhBuB,EAiBxB,EAjBwB,CAA1B;AAoBA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEA,MAAAA,IAAI,EAAEL,IAAI,CAACK,IAAb;AAAmBG,MAAAA;AAAnB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,QADH,CADF;AAKD,CAxCD;;AA0CA,MAAMe,cAAc,GAAG,MAAM;AAC3B,QAAMC,OAAO,GAAGrB,UAAU,CAACG,WAAD,CAA1B;AAEA,SAAO,EACL,GAAGkB;AADE,GAAP;AAGD,CAND;;AAQA,eAAeD,cAAf;AACA,SAAShB,mBAAT","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from \"react\";\n\nimport api from \"../services/api\";\n\ninterface SignInCredentials {\n  email: string;\n  password: string;\n}\n\ninterface AuthContextState {\n  user: object;\n  signIn({ email, password }: SignInCredentials): Promise<void>;\n}\nconst AuthContext = createContext<AuthContextState>({} as AuthContextState);\n\ninterface AuthState {\n  token: string;\n  user: object;\n}\nconst AuthContextProviver: React.FC = ({ children }) => {\n  const [data, setData] = useState<AuthState>(() => {\n    const token = localStorage.getItem(\"@GOBARBER:token\");\n    const user = localStorage.getItem(\"@GOBARBER:user\");\n\n    if (token && user) {\n      return {\n        token: token,\n        user: JSON.parse(user),\n      };\n    }\n\n    return {} as AuthState;\n  });\n\n  const signIn = useCallback(\n    async ({ email, password }: SignInCredentials): Promise<void> => {\n      const { data } = await api.post(\"/sessions\", {\n        email,\n        password,\n      });\n\n      const { token, user } = data;\n\n      setData({\n        user,\n        token,\n      });\n\n      localStorage.setItem(\"@GOBARBER:token\", token);\n      localStorage.setItem(\"@GOBARBER:user\", JSON.stringify(user));\n    },\n    []\n  );\n\n  return (\n    <AuthContext.Provider value={{ user: data.user, signIn }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nconst useAuthContext = () => {\n  const context = useContext(AuthContext);\n\n  return {\n    ...context,\n  };\n};\n\nexport default useAuthContext;\nexport { AuthContextProviver };\n"]},"metadata":{},"sourceType":"module"}