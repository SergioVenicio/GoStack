{"ast":null,"code":"var _jsxFileName = \"/mnt/dados/goStack/semana_3/gobarber-web/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from \"react\";\nimport { FiAlertCircle } from \"react-icons/fi\";\nimport { useField } from \"@unform/core\";\nimport { Container } from \"./styles\";\n\nconst Input = ({\n  name,\n  type,\n  placeholder,\n  icon: Icon\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const inputRef = useRef(null);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  const handleFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\"\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isErrored: !!error,\n    isFocused: isFocused,\n    isFilled: isFilled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: name,\n    type: type,\n    placeholder: placeholder,\n    defaultValue: defaultValue,\n    ref: inputRef,\n    onFocus: handleFocus,\n    onBlur: handleInputBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), error && /*#__PURE__*/React.createElement(FiAlertCircle, {\n    color: \"#c53030\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default Input;","map":{"version":3,"sources":["/mnt/dados/goStack/semana_3/gobarber-web/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","FiAlertCircle","useField","Container","Input","name","type","placeholder","icon","Icon","isFocused","setIsFocused","isFilled","setIsFilled","inputRef","fieldName","defaultValue","error","registerField","handleInputBlur","current","value","handleFocus","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAEEC,SAFF,EAGEC,MAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,OANP;AAQA,SAASC,aAAT,QAA8B,gBAA9B;AAEA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAMA,MAAMC,KAA2B,GAAG,CAAC;AACnCC,EAAAA,IADmC;AAEnCC,EAAAA,IAFmC;AAGnCC,EAAAA,WAHmC;AAInCC,EAAAA,IAAI,EAAEC;AAJ6B,CAAD,KAK9B;AACJ,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMe,QAAQ,GAAGhB,MAAM,CAAmB,IAAnB,CAAvB;AAEA,QAAM;AAAEiB,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDhB,QAAQ,CAACG,IAAD,CAAlE;AAEA,QAAMc,eAAe,GAAGnB,WAAW,CAAC,MAAM;AAAA;;AACxCW,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,IAAAA,WAAW,CAAC,CAAC,uBAACC,QAAQ,CAACM,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AACD,GAHkC,EAGhC,EAHgC,CAAnC;AAKA,QAAMC,WAAW,GAAGtB,WAAW,CAAC,MAAM;AACpCW,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAF8B,EAE5B,EAF4B,CAA/B;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,aAAa,CAAC;AACZb,MAAAA,IAAI,EAAEU,SADM;AAEZQ,MAAAA,GAAG,EAAET,QAAQ,CAACM,OAFF;AAGZI,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAE,CAAC,CAACD,KAAxB;AAA+B,IAAA,SAAS,EAAEP,SAA1C;AAAqD,IAAA,QAAQ,EAAEE,QAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX,eAEE;AACE,IAAA,IAAI,EAAEJ,IADR;AAEE,IAAA,IAAI,EAAEC,IAFR;AAGE,IAAA,WAAW,EAAEC,WAHf;AAIE,IAAA,YAAY,EAAES,YAJhB;AAKE,IAAA,GAAG,EAAEF,QALP;AAME,IAAA,OAAO,EAAEQ,WANX;AAOE,IAAA,MAAM,EAAEH,eAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAYGF,KAAK,iBAAI,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZZ,CADF;AAgBD,CA9CD;;AAgDA,eAAeb,KAAf","sourcesContent":["import React, {\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n} from \"react\";\nimport { IconBaseProps } from \"react-icons\";\nimport { FiAlertCircle } from \"react-icons/fi\";\n\nimport { useField } from \"@unform/core\";\n\nimport { Container } from \"./styles\";\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\nconst Input: React.FC<InputProps> = ({\n  name,\n  type,\n  placeholder,\n  icon: Icon,\n}) => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n\n  const handleFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: \"value\",\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isErrored={!!error} isFocused={isFocused} isFilled={isFilled}>\n      {Icon && <Icon size={20} />}\n      <input\n        name={name}\n        type={type}\n        placeholder={placeholder}\n        defaultValue={defaultValue}\n        ref={inputRef}\n        onFocus={handleFocus}\n        onBlur={handleInputBlur}\n      />\n\n      {error && <FiAlertCircle color=\"#c53030\" />}\n    </Container>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}