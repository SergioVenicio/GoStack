{"ast":null,"code":"export default (error => {\n  var _error$inner;\n\n  const validationErrors = {};\n  error === null || error === void 0 ? void 0 : (_error$inner = error.inner) === null || _error$inner === void 0 ? void 0 : _error$inner.forEach(error => {\n    validationErrors[error.path] = error.message;\n  });\n  return validationErrors;\n});","map":{"version":3,"sources":["/mnt/dados/goStack/semana_3/gobarber/web/src/utils/getValidationErrors.ts"],"names":["error","validationErrors","inner","forEach","path","message"],"mappings":"AAKA,gBAAgBA,KAAD,IAAoC;AAAA;;AACjD,QAAMC,gBAAwB,GAAG,EAAjC;AAEAD,EAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,4BAAAA,KAAK,CAAEE,KAAP,8DAAcC,OAAd,CAAuBH,KAAD,IAAW;AAC/BC,IAAAA,gBAAgB,CAACD,KAAK,CAACI,IAAP,CAAhB,GAA+BJ,KAAK,CAACK,OAArC;AACD,GAFD;AAIA,SAAOJ,gBAAP;AACD,CARD","sourcesContent":["import { ValidationError } from \"yup\";\n\ninterface Errors {\n  [key: string]: string;\n}\nexport default (error: ValidationError): Errors => {\n  const validationErrors: Errors = {};\n\n  error?.inner?.forEach((error) => {\n    validationErrors[error.path] = error.message;\n  });\n\n  return validationErrors;\n};\n"]},"metadata":{},"sourceType":"module"}