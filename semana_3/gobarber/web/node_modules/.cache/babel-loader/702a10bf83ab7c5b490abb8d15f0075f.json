{"ast":null,"code":"var _jsxFileName = \"/mnt/dados/goStack/semana_3/gobarber-web/src/contexts/ToastContext.tsx\";\nimport React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 } from 'uuid';\nimport ToastContainer from '../components/ToastContainer';\nconst toastContext = createContext({});\n\nconst ToastContextProvider = ({\n  children\n}) => {\n  const [messages, setMessages] = useState([]);\n  const addToast = useCallback(({\n    title,\n    type,\n    description\n  }) => {\n    const id = v4();\n    const toast = {\n      id,\n      title,\n      type,\n      description\n    };\n    setMessages(messages => [...messages, toast]);\n  }, []);\n  const removeToast = useCallback(id => {}, []);\n  return /*#__PURE__*/React.createElement(toastContext.Provider, {\n    value: {\n      addToast,\n      removeToast\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, children, /*#__PURE__*/React.createElement(ToastContainer, {\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst useToastContext = () => {\n  const context = useContext(toastContext);\n\n  if (!context) {\n    throw new Error(\"useToastContext must be used within ToastContextProviver\");\n  }\n\n  return context;\n};\n\nexport default useToastContext;\nexport { ToastContextProvider };","map":{"version":3,"sources":["/mnt/dados/goStack/semana_3/gobarber-web/src/contexts/ToastContext.tsx"],"names":["React","createContext","useCallback","useContext","useState","v4","ToastContainer","toastContext","ToastContextProvider","children","messages","setMessages","addToast","title","type","description","id","toast","removeToast","useToastContext","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,WAA/B,EAA4CC,UAA5C,EAAwDC,QAAxD,QAAwE,OAAxE;AACA,SAASC,EAAT,QAAmB,MAAnB;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;AAYA,MAAMC,YAAY,GAAGN,aAAa,CAAmB,EAAnB,CAAlC;;AAEA,MAAMO,oBAA8B,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AACrD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAiB,EAAjB,CAAxC;AAEA,QAAMQ,QAAQ,GAAGV,WAAW,CAAC,CAAC;AAACW,IAAAA,KAAD;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,GAAD,KAA0D;AACrF,UAAMC,EAAE,GAAGX,EAAE,EAAb;AACA,UAAMY,KAAK,GAAG;AACZD,MAAAA,EADY;AAEZH,MAAAA,KAFY;AAGZC,MAAAA,IAHY;AAIZC,MAAAA;AAJY,KAAd;AAOAJ,IAAAA,WAAW,CAAED,QAAD,IAAc,CAAC,GAAGA,QAAJ,EAAcO,KAAd,CAAf,CAAX;AACD,GAV2B,EAUzB,EAVyB,CAA5B;AAYA,QAAMC,WAAW,GAAGhB,WAAW,CAAEc,EAAD,IAAgB,CAE/C,CAF8B,EAE5B,EAF4B,CAA/B;AAIA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACJ,MAAAA,QAAD;AAAWM,MAAAA;AAAX,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,QADH,eAEE,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CAzBD;;AA4BA,MAAMS,eAAe,GAAG,MAAwB;AAC9C,QAAMC,OAAO,GAAGjB,UAAU,CAACI,YAAD,CAA1B;;AAEA,MAAI,CAACa,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,SAAOD,OAAP;AACD,CARD;;AAUA,eAAeD,eAAf;AACA,SAASX,oBAAT","sourcesContent":["import React, { createContext, useCallback, useContext, useState } from 'react';\nimport { v4 } from 'uuid'\n\nimport ToastContainer from '../components/ToastContainer'\n\nexport interface ToastMessage {\n  id: string;\n  type?: 'success' | 'error'| 'info';\n  description?: string;\n  title: string;\n}\ninterface ToastContextData {\n  addToast(message: Omit<ToastMessage, 'id'>): void;\n  removeToast(id: string): void;\n}\nconst toastContext = createContext<ToastContextData>({} as ToastContextData)\n\nconst ToastContextProvider: React.FC = ({children}) => {\n  const [messages, setMessages] = useState<ToastMessage[]>([])\n\n  const addToast = useCallback(({title, type, description}: Omit<ToastMessage, 'id'>) => {\n    const id = v4();\n    const toast = {\n      id,\n      title,\n      type,\n      description\n    }\n\n    setMessages((messages) => [...messages, toast])\n  }, [])\n\n  const removeToast = useCallback((id: string) => {\n    \n  }, [])\n\n  return (\n    <toastContext.Provider value={{addToast, removeToast }}>\n      {children}\n      <ToastContainer messages={messages} />\n    </toastContext.Provider>\n  )\n}\n\n\nconst useToastContext = (): ToastContextData => {\n  const context = useContext(toastContext);\n\n  if (!context) {\n    throw new Error(\"useToastContext must be used within ToastContextProviver\");\n  }\n\n  return context;\n}\n\nexport default useToastContext\nexport { ToastContextProvider }"]},"metadata":{},"sourceType":"module"}